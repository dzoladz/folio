{
    "openapi": "3.0.0",
    "info": {
      "title": "Admin API",
      "version": "v1"
    },
    "servers": [
      {
        "url": "http://localhost:8081/"
      }
    ],
    "paths": {
      "/admin/importSQL": {
        "post": {
          "responses": {
            "200": {
              "description": "Saved",
              "headers": {
                "Location": {
                  "description": "URI to the created <<resourcePathName|!singularize>> item",
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "hasParams": true
            },
            "400": {
              "description": "Bad request",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "unable to add <<resourcePathName|!singularize>>"
                  }
                }
              },
              "hasParams": true
            },
            "500": {
              "description": "Internal server error, e.g. due to misconfiguration",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "Uploads a file and saves it to a directory configured on the server\n",
          "operationId": "POST_admin-importSQL",
          "requestBody": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "required": true
          }
        }
      },
      "/admin/loglevel": {
        "put": {
          "responses": {
            "200": {
              "description": "Returns packages with log level of the updated packages",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "package": "log level",
                      "package2": "log level"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error, e.g. due to misconfiguration",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "Set logging level for all loggers in the JVM or just for a specific package / class",
          "operationId": "PUT_admin-loglevel"
        },
        "get": {
          "responses": {
            "200": {
              "description": "Returns packages with log level",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "package": "log level",
                      "package2": "log level"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error, e.g. due to misconfiguration",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "Get the logging level for all loggers in the JVM",
          "operationId": "GET_admin-loglevel"
        }
      },
      "/admin/jstack": {
        "put": {
          "responses": {
            "204": {
              "description": "Jstack request successful"
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "dumps jstacks every N seconds to a jstack file to find potential bottlenecks. Looking at this | file you can see if there are functions blocking for too long",
          "operationId": "PUT_admin-jstack"
        },
        "get": {
          "responses": {
            "200": {
              "description": "Returns the stack trace of all threads in the JVM",
              "content": {
                "text/html": {
                  "schema": {
                    "example": "Text....."
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "Get stack trace",
          "operationId": "GET_admin-jstack"
        }
      },
      "/admin/memory": {
        "get": {
          "responses": {
            "200": {
              "description": "Returns JVM memory info",
              "content": {
                "text/html": {
                  "schema": {
                    "example": "Text....."
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "Get JVM memory info",
          "operationId": "GET_admin-memory"
        }
      },
      "/admin/postgres_maintenance": {
        "post": {
          "responses": {
            "201": {
              "description": "Command requested successful"
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "run one of the following maintenance jobs on the Postgres DB. | analyze, vacuum, vacuum analyze, vacuum verbose",
          "operationId": "POST_admin-postgres_maintenance",
          "parameters": [
            {
              "name": "table",
              "in": "query",
              "required": true,
              "description": "Table name to run command on",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "command",
              "in": "query",
              "description": "The command to run\n",
              "schema": {
                "default": "ANALYZE",
                "enum": [
                  "ANALYZE",
                  "VACUUM",
                  "VACUUM_ANALYZE",
                  "VACUUM_VERBOSE"
                ],
                "type": "string"
              }
            }
          ]
        }
      },
      "/admin/postgres_active_sessions": {
        "get": {
          "responses": {
            "200": {
              "description": "Returns active sessions with the following information. |\n  process ID of the currently connected user to the database. |\n  name of the database to which the user is currently connected. |\n  the full text of the SQL query that is being executed by the client. |\n  etc...\n"
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "Get active PostgreSQL sessions",
          "operationId": "GET_admin-postgres_active_sessions"
        }
      },
      "/admin/postgres_load": {
        "get": {
          "responses": {
            "200": {
              "description": "Returns load with the following information. |\n  Number of active connections. |\n  Number of rollbacks and commits issued. |\n  Number of blocks read ( block = an 8kb segment information the file storing the table. ). |\n  Number of buffer hits (cache) |\n  Note that the function calls SELECT pg_stat_reset(); to clear stats, waits 10 seconds, and |\n  then returns with the info collected during those 10 seconds\n"
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "Get load information on PostgreSQL",
          "operationId": "GET_admin-postgres_load"
        }
      },
      "/admin/postgres_table_access_stats": {
        "get": {
          "responses": {
            "200": {
              "description": "Returns info about how the tables are being accessed either sequential or index scans\n"
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "Get access stats on the PostgreSQL tables",
          "operationId": "GET_admin-postgres_table_access_stats"
        }
      },
      "/admin/postgres_table_size": {
        "get": {
          "responses": {
            "200": {
              "description": "Returns info for every table in format - table | table size | index size\n"
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "amount of disk usage for a specific database and its associated tables and indexes.",
          "operationId": "GET_admin-postgres_table_size"
        }
      },
      "/admin/table_index_usage": {
        "get": {
          "responses": {
            "200": {
              "description": "Returns index usage info for every table\n"
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "table index usage rates per table",
          "operationId": "GET_admin-table_index_usage"
        }
      },
      "/admin/cache_hit_rates": {
        "get": {
          "responses": {
            "200": {
              "description": "cache hit rates\n"
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "cache hit rates",
          "operationId": "GET_admin-cache_hit_rates"
        }
      },
      "/admin/slow_queries": {
        "get": {
          "responses": {
            "200": {
              "description": "List of slow queries\n"
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "Check for currently running queries that have been executing longer than X seconds",
          "operationId": "GET_admin-slow_queries"
        }
      },
      "/admin/total_db_size": {
        "get": {
          "responses": {
            "200": {
              "description": "Returns the size of the entire database\n",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "db_size": "711 MB"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "Returns the size of the entire database for example, db_size = 711 MB",
          "operationId": "GET_admin-total_db_size"
        }
      },
      "/admin/db_cache_summary": {
        "get": {
          "responses": {
            "200": {
              "description": "Returns a list of the tables / indexes in the shared_buffers\n"
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "Returns a list of the tables / indexes in the shared_buffers (cache) and their size. This is | an expensive API from a DB resource perspective and should not run frequently (every few hours should suffice)",
          "operationId": "GET_admin-db_cache_summary"
        }
      },
      "/admin/list_locking_queries": {
        "get": {
          "responses": {
            "200": {
              "description": ""
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "Returns a list of queries in transactions that are blocking other queries. The result includes the blocking query, the query being blocked, and their pids",
          "operationId": "GET_admin-list_locking_queries"
        }
      },
      "/admin/kill_query": {
        "delete": {
          "responses": {
            "204": {
              "description": "Query terminated successfully"
            },
            "404": {
              "description": "PID not found",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "<<resourcePathName|!singularize>> not found"
                  }
                }
              },
              "hasParams": true
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "Stops a query from running based on its PID using the pg_terminate_backend command",
          "operationId": "DELETE_admin-kill_query"
        }
      },
      "/admin/postgres_drop_indexes": {
        "put": {
          "responses": {
            "204": {
              "description": "Indexes dropped"
            },
            "400": {
              "description": "Bad request",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "No indexes to delete"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error, e.g. due to misconfiguration",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "Drop indexes, useful before a large batch load, tenantid will be used to select the correct schema to use",
          "operationId": "PUT_admin-postgres_drop_indexes"
        }
      },
      "/admin/postgres_create_indexes": {
        "put": {
          "responses": {
            "204": {
              "description": "Indexes created"
            },
            "400": {
              "description": "Bad request",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "example message"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error, e.g. due to misconfiguration",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "Create indexes, useful if prior to a large batch load the indexes were dropped, tenantid will be used to select the correct schema to use",
          "operationId": "PUT_admin-postgres_create_indexes"
        }
      },
      "/admin/set_AES_key": {
        "post": {
          "responses": {
            "204": {
              "description": "Secret key set"
            }
          },
          "description": "Sets the AES secret key that the postgres config file password was encrypted with. The key will only be checked | when the configuration file is read in and the DB connection is created",
          "operationId": "POST_admin-set_AES_key"
        }
      },
      "/admin/get_password": {
        "post": {
          "responses": {
            "200": {
              "description": "returned password",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "as35235+df+df/ggr"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "unable to add <<resourcePathName|!singularize>>"
                  }
                }
              },
              "hasParams": true
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "The API takes the secret key passed in and the x-okapi-tenant header and returns the DB password generated for | that tenant's schema",
          "operationId": "POST_admin-get_password"
        }
      },
      "/admin/health": {
        "get": {
          "responses": {
            "200": {
              "description": ""
            },
            "400": {
              "description": "Bad request",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": ""
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "The API returns 200 if service is up and responding. Should be overridden | by individual services that want to actually run some business logic to determine health.",
          "operationId": "GET_admin-health"
        }
      },
      "/admin/module_stats": {
        "get": {
          "responses": {
            "200": {
              "description": "returned status"
            },
            "400": {
              "description": "Bad request",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": ""
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "text/plain": {
                  "schema": {
                    "example": "Internal server error, contact administrator"
                  }
                }
              }
            }
          },
          "description": "The API returns service specific statistics. Should be overridden | by individual services that run a set of business logic functions / gather stats and return.",
          "operationId": "GET_admin-module_stats"
        }
      }
    },
    "components": {
      "schemas": {},
      "responses": {},
      "parameters": {},
      "examples": {},
      "requestBodies": {},
      "headers": {},
      "securitySchemes": {},
      "links": {},
      "callbacks": {}
    }
  }